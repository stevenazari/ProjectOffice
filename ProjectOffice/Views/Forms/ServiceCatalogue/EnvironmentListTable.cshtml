@Styles.Render("~/css/components/bootstrapTables")

<div class="container" style="margin-bottom: 10px;">
    <div id="toolbar">
        <button id="remove" class="btn btn-danger" disabled><i class="glyphicon glyphicon-remove"></i> Delete</button>
        <button type="button" class="btn btn-primary" data-toggle="collapse" data-target="#EnvironmentListAdd" aria-expanded="false" aria-controls="collapse">Administration</button>
    </div>
    <fieldset>
        <div id="EnvironmentListAdd" class="collapse">
            
            <div class="panel-group" id="admin" role="tablist" aria-multiselectable="true">

                <div class="panel panel-default well form-horizontal">
                    <a class="collapsed" role="button" data-toggle="collapse" data-parent="#admin" href="#CreateEnvironmentContainer" aria-expanded="false" aria-controls="CreateEnvironmentContainer">
                        <div role="tab" id="CreateEnvironmentButton">
                            <h4 class="panel-title">
                                Create Environment
                            </h4>
                        </div>
                    </a>
                    <div id="CreateEnvironmentContainer" class="panel-collapse collapse" role="tabpanel" aria-labelledby="CreateEnvironmentButton">
                        <div class="panel-body">
                            @{ Html.RenderAction("Create_Environment", "Environment");}
                        </div>
                    </div>
                </div>

                <div class="panel panel-default well form-horizontal">
                    <a class="collapsed" role="button" data-toggle="collapse" data-parent="#admin" href="#CreateServerContainer" aria-expanded="false" aria-controls="CreateServerContainer">
                        <div role="tab" id="CreateServerButton">
                            <h4 class="panel-title">
                                Create Server
                            </h4>
                        </div>
                    </a>
                    <div id="CreateServerContainer" class="panel-collapse collapse" role="tabpanel" aria-labelledby="CreateServerButton">
                        <div class="panel-body">
                            @{ Html.RenderAction("Create_Server", "Server");}
                        </div>
                    </div>
                </div>

                <div class="panel panel-default well form-horizontal">
                    <a class="collapsed" role="button" data-toggle="collapse" data-parent="#admin" href="#CreateSupportCompanyContainer" aria-expanded="false" aria-controls="SupportCompanyContainer">
                        <div role="tab" id="CreateSupportCompanyButton">
                            <h4 class="panel-title">
                                Create Support Company
                            </h4>
                        </div>
                    </a>
                    <div id="CreateSupportCompanyContainer" class="panel-collapse collapse" role="tabpanel" aria-labelledby="CreateSupportCompanyButton">
                        <div class="panel-body">
                            @{ Html.RenderAction("Create_Support_Company", "SupportCompany");}
                        </div>
                    </div>
                </div>

                <div class="panel panel-default well form-horizontal">
                    <a class="collapsed" role="button" data-toggle="collapse" data-parent="#admin" href="#CreateApplicationContainer" aria-expanded="false" aria-controls="CreateApplicationContainer">
                        <div role="tab" id="CreateApplicationButton">
                            <h4 class="panel-title">
                                Create Application
                            </h4>
                        </div>
                    </a>
                    <div id="CreateApplicationContainer" class="panel-collapse collapse" role="tabpanel" aria-labelledby="CreateApplicationButton">
                        <div class="panel-body">
                            @{ Html.RenderAction("Create_Application", "Application");}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </fieldset>

    <table id="table"
           data-toolbar="#toolbar"
           data-search="true"
           data-show-refresh="true"
           data-show-toggle="true"
           data-show-columns="true"
           data-show-export="true"
           data-detail-view="true"
           data-detail-formatter="detailFormatter"
           data-minimum-count-columns="2"
           data-show-pagination-switch="false"
           data-pagination="true"
           data-id-field="id"
           data-page-list="[10, 25, 50, 100, ALL]"
           data-show-footer="false"
           data-side-pagination="server"
           data-url="/Environment/GetEnvironments"
           data-response-handler="responseHandler"></table>
</div>

<script>
    var $table = $('#table'),
        $remove = $('#remove'),
        $button = $('#remove'),
        selections = [];     
/*
    $(function () {
        $button.click(function () {
            var ids = $.map($table.bootstrapTable('getSelections'), function (row) {
                return row.id;
            });

            $table.bootstrapTable('remove', {
                field: 'Environment_ID',
                values: ids
            });
        });
    });
*/
    function initTable() {
        $table.bootstrapTable({
            //height: getHeight() //not doing this as we don't want scroll bars!
            columns: [
                [
                    {
                        field: 'state',
                        checkbox: true,
                        align: 'center',
                        valign: 'middle'
                    }, {
                        title: 'Environment ID',
                        field: 'Environment_ID',
                        align: 'center',
                        valign: 'middle',
                        sortable: true,
                        //footerFormatter: totalTextFormatter
                    },
                    {
                        title: 'Name',
                        field: 'Name',
                        sortable: true,
                        editable: true,
                        align: 'center'
                        //footerFormatter: totalNameFormatter,
                    },
                    {
                        title: 'Environment Type',
                        field: 'Environment_Type',
                        sortable: true,
                        align: 'center',
                        editable: {
                            type: 'text',
                            title: 'Server_Type',
                            validate: function (value) {
                                value = $.trim(value);
                                if (!value) {
                                    return 'This field is required';
                                }
                                if (!/^\$/.test(value)) {
                                    return 'This field needs to start width $.'
                                }
                                var data = $table.bootstrapTable('getData'),
                                    index = $(this).parents('tr').data('index');
                                console.log(data[index]);
                                return '';
                            }
                        },
                        //footerFormatter: totalPriceFormatter
                    },
                    {
                        title: 'Comment',
                        field: 'Comment',
                        align: 'center',
                        //events: operateEvents,
                        //formatter: operateFormatter
                    }
                ]
            ]
        });
        
        // sometimes footer render error. sswef
        setTimeout(function () {
            $table.bootstrapTable('resetView');
        }, 200); 

        $table.on('check.bs.table uncheck.bs.table ' +
            'check-all.bs.table uncheck-all.bs.table', function () {
                $remove.prop('disabled', !$table.bootstrapTable('getSelections').length);

                // save your data, here just save the current page
                selections = getIdSelections();
                // push or splice the selections if you want to save all data selections
            });

        
        $table.on('expand-row.bs.table', function (e, index, row, $detail) {
            $detail.html('Loading from ajax request...');

            $.ajax({
                type: 'POST',
                url: '@Url.Content("/Environment/EnvironmentDetails")',
                data: row,
                success: function (data) {
                    $detail.html(data);
                }
            })

        });
        

        $table.on('all.bs.table', function (e, name, args) {
            console.log(name, args);
        });

        var ids = getIdSelections();

        $table.bootstrapTable('remove', {
            field: 'Environment_ID',
            values: ids
        });

        $remove.click(function () {
            $remove.prop('disabled', true);
        });

        $(window).resize(function () {
            $table.bootstrapTable('resetView', {
                //height: getHeight() //not doing this as we don't want scroll bars!
            });
        });
    }

    function getIdSelections() {
        return $.map($table.bootstrapTable('getSelections'), function (row) {
            return row.id
        });
    }

    function responseHandler(res) {
        $.each(res.rows, function (i, row) {
            row.state = $.inArray(row.id, selections) !== -1;
        });
        return res;
    }

    function detailFormatter(index, row) {
        /*
        To get the key names for each field, reference the SQL Stored Procedure "Get_Environments"
        */
        var html = [
        ];

        /*
        $.each(row, function (key, value) {
            html.push('' +
                '<p><b>' + key + ':</b> ' + value + '</p > '
            );
        });
        */
        return html.join('');
    }

    function operateFormatter(value, row, index) {
        return [
            '<a class="like" href="javascript:void(0)" title="Like">',
            '<i class="glyphicon glyphicon-heart"></i>',
            '</a>  ',
            '<a class="remove" href="javascript:void(0)" title="Remove">',
            '<i class="glyphicon glyphicon-remove"></i>',
            '</a>'
        ].join('');
    }

    window.operateEvents = {
        'click .like': function (e, value, row, index) {
            alert('You click like action, row: ' + JSON.stringify(row));
        },
        'click .remove': function (e, value, row, index) {
            $table.bootstrapTable('remove', {
                field: 'Environment_ID',
                values: [row.id]
            });
        }
    };

    function totalTextFormatter(data) {
        return 'Total';
    }

    function totalNameFormatter(data) {
        return data.length;
    }

    function totalPriceFormatter(data) {
        var total = 0;
        $.each(data, function (i, row) {
            total += +(row.price.substring(1));
        });
        return '$' + total;
    }

    function getHeight() {
        return $(window).height() - $('h1').outerHeight(true);
    }

    $(function () {
        var scripts = [
            location.search.substring(1) || '../bower_components/bootstrap-Table/dist/bootstrap-table.js',
            '../bower_components/bootstrap-Table/dist/extensions/export/bootstrap-table-export.js',
            'http://rawgit.com/hhurz/tableExport.jquery.plugin/master/tableExport.js',
            '../bower_components/bootstrap-Table/dist/extensions/editable/bootstrap-table-editable.js',
            'http://rawgit.com/vitalets/x-editable/master/dist/bootstrap3-editable/js/bootstrap-editable.js'
        ],
            eachSeries = function (arr, iterator, callback) {
                callback = callback || function () { };
                if (!arr.length) {
                    return callback();
                }
                var completed = 0;
                var iterate = function () {
                    iterator(arr[completed], function (err) {
                        if (err) {
                            callback(err);
                            callback = function () { };
                        }
                        else {
                            completed += 1;
                            if (completed >= arr.length) {
                                callback(null);
                            }
                            else {
                                iterate();
                            }
                        }
                    });
                };
                iterate();
            };

        eachSeries(scripts, getScript, initTable);
    });

    function getScript(url, callback) {
        var head = document.getElementsByTagName('head')[0];
        var script = document.createElement('script');
        script.src = url;

        var done = false;
        // Attach handlers for all browsers
        script.onload = script.onreadystatechange = function () {
            if (!done && (!this.readyState ||
                this.readyState == 'loaded' || this.readyState == 'complete')) {
                done = true;
                if (callback)
                    callback();

                // Handle memory leak in IE
                script.onload = script.onreadystatechange = null;
            }
        };

        head.appendChild(script);

        // We handle everything using the script element injection
        return undefined;
    }
</script>
@Scripts.Render("~/bundles/environmentList")